<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on mrr1vfe</title>
    <link>https://www.mrr1vfe.io/tags/c/</link>
    <description>Recent content in C on mrr1vfe</description>
    <image>
      <url>https://www.mrr1vfe.io/papermod-cover.png</url>
      <link>https://www.mrr1vfe.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.mrr1vfe.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compiling C code using GCC</title>
      <link>https://www.mrr1vfe.io/posts/matrix/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/matrix/</guid>
      <description>Basic compilation using GCC  gcc matrix.c  This command outputs a executable binary named a.out, which can be executed in the shell by ./a.out.
  Name the output binary file  a.out may not be a great name for the your binary, and using mv to rename a file every time after compilation is tedious. The -o flag allows users to name the output binary.
gcc matrix.c -o matrix  Run the program by .</description>
    </item>
    
    <item>
      <title>Introduction to Operating Systems</title>
      <link>https://www.mrr1vfe.io/posts/cs537/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/cs537/</guid>
      <description>Introduction 1  OS abstraction  Provide standard library to access resource that is valuable such as CPU, memory, and monitor. OS providing abstraction has a variety of advantages. It allows applications to reuse common facilities; it makes different devices look the same; and it provides higher-level or more useful functionality. The challenges of OS providing abstraction are identifying the correct abstraction and deciding how much of hardware should be exposed.</description>
    </item>
    
    <item>
      <title>Memory and Cache Review</title>
      <link>https://www.mrr1vfe.io/posts/memory-and-cache-review/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/memory-and-cache-review/</guid>
      <description>Locality  Principle of locality  Programs tend to use data and instructions with addresses near or equal to those they have recently used.
  temporal locality   Recently referenced items are likely to be referenced again in the near future.
  spatial locality   Items with nearby addresses tend to be referenced close together in time.
    Locality Example  sum = 0; for (int i = 0; i &amp;lt; n; i++) sum += a[i]; return sum;  Data References    Reference array elements in succession (stride - 1 reference pattern).</description>
    </item>
    
  </channel>
</rss>
