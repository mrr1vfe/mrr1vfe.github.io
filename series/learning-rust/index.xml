<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Learning Rust on mrr1vfe</title>
    <link>https://www.mrr1vfe.io/series/learning-rust/</link>
    <description>Recent content in Learning Rust on mrr1vfe</description>
    <image>
      <url>https://www.mrr1vfe.io/papermod-cover.png</url>
      <link>https://www.mrr1vfe.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.mrr1vfe.io/series/learning-rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decimal Numbers</title>
      <link>https://www.mrr1vfe.io/posts/decimal-numbers/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/decimal-numbers/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
Scientific Notation \[3.14 \times 10 ^ 8 \]
 ::Sign:: representing positive or negative ::Mantissa:: 3.14 ::Radix:: 10 ::Exponent:: 8  Floating Point Computers use scientific notation in memory to represent floating point numbers. A floating number in memory is constitutive of 3 parts
 ::Sign:: ::Mantissa:: ::Exponent:: The ::radix:: is predefined to be 2 and therefore does not need to be stored.</description>
    </item>
    
    <item>
      <title>Global variables</title>
      <link>https://www.mrr1vfe.io/posts/global-variables/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/global-variables/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
 All caps If mutable, it’s modifier is static mut, meaning the variable has a mutable static lifetime (valid for the life of the program). If immutable, use const instead.  Code that modify global variable should be placed into an unsafe block. unsafe means as safe as C.
const vs. let Although let also defines immutable variable, it defines run time constant.</description>
    </item>
    
    <item>
      <title>Struct, Enum</title>
      <link>https://www.mrr1vfe.io/posts/struct-enum/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/struct-enum/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
type Just an aliasing mechanism. For example, the following code will compile and run:
type MyString = String; fn main() { let haha: MyString = String::from(&amp;#34;haha&amp;#34;); let hehe: String = MyString::from(&amp;#34;hehe&amp;#34;); } “new type” struct wrapping If aliasing is not ideal, try this:
struct MyString(String); // a tuple Now, the following code will not compile since MyString and String are no longer interchangeable.</description>
    </item>
    
    <item>
      <title>Arrays, slices, and vectors</title>
      <link>https://www.mrr1vfe.io/posts/arrays-slices-and-vectors/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/arrays-slices-and-vectors/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
Arrays  A collection of same thing (type). Size is not changeable. Size is known at compile time. Unlike arrays in Java, arrays in Rust are allocated on stack.  Array initialization  Comma-delimited list within square brackets [8, 9, 6, 4] Repeat expression [5; 10]: An array contains ten 5s.  Type annotation Similar to the repeat expression [type; size], the left hand side is the type of individual element, and the right hand side is the size of the array.</description>
    </item>
    
    <item>
      <title>Reading from user input</title>
      <link>https://www.mrr1vfe.io/posts/reading-from-user-input/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/reading-from-user-input/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
Command line tooling A 3rd party crate called clap is better at handling command line arguments. GitHub - clap-rs/clap: A full featured, fast Command Line Argument Parser for Rust
use clap::{App, Arg}; fn main() { let args = App::new(&amp;#34;grep-lite&amp;#34;) .version(&amp;#34;0.1&amp;#34;) .about(&amp;#34;serach for patterns&amp;#34;) .arg( Arg::with_name(&amp;#34;pattern&amp;#34;) .help(&amp;#34;The pattern to search for&amp;#34;) .takes_value(true) .required(true), ) .arg( Arg::with_name(&amp;#34;input&amp;#34;) .help(&amp;#34;File to search&amp;#34;) .takes_value(true) .required(true), ) .get_matches(); let pattern = args.</description>
    </item>
    
    <item>
      <title>Some basic Rust</title>
      <link>https://www.mrr1vfe.io/posts/some-basic-rust/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.mrr1vfe.io/posts/some-basic-rust/</guid>
      <description>Notes on Rust in Action, by Tim McNamara
Numbers Rust supports operator overloading. Therefore, operators like + can be used on different types, not only numbers (Java does not support it).
There is not implicit conversion between types. i32 is always i32 unless otherwise indicated.
Numbers have methods. But the type of a number must be specified.
To print the binary representation of a number, use {:b} as the placeholder for the number.</description>
    </item>
    
  </channel>
</rss>
